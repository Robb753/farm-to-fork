import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import { clerkClient } from "@clerk/nextjs/server";
import { sendFarmerRequestStatusEmail } from "@/lib/config/email-notifications";

// üîê Initialisation s√©curis√©e de Supabase (cl√© SERVICE_ROLE)
if (!process.env.SUPABASE_SERVICE_ROLE_KEY || !process.env.SUPABASE_URL) {
  throw new Error("Cl√© Supabase manquante dans l'environnement");
}

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

export async function POST(req) {
  try {
    const { requestId, userId, role, status } = await req.json();

    console.log("‚úÖ [VALIDATE] Donn√©es re√ßues :", {
      requestId,
      userId,
      role,
      status,
    });

    if (!requestId || !userId || !role || !status) {
      return NextResponse.json(
        { error: "Param√®tres requis manquants." },
        { status: 400 }
      );
    }

    const numericRequestId = Number(requestId);
    if (isNaN(numericRequestId)) {
      console.warn("[VALIDATE] ‚ùå ID de demande non num√©rique :", requestId);
      return NextResponse.json(
        { error: "ID de la demande invalide" },
        { status: 400 }
      );
    }

    // 1. R√©cup√©ration de la demande
    const { data: requestData, error: requestError } = await supabase
      .from("farmer_requests")
      .select("*")
      .eq("id", numericRequestId)
      .single();

    if (requestError || !requestData) {
      console.error("[VALIDATE] ‚ùå Demande introuvable :", requestError);
      return NextResponse.json(
        { error: "Demande introuvable." },
        { status: 404 }
      );
    }

    // 2. Mise √† jour du r√¥le Clerk
    try {
      await clerkClient.users.updateUser(userId, {
        publicMetadata: { role },
      });
    } catch (err) {
      console.error("[VALIDATE] ‚ùå Clerk update error:", err);
      return NextResponse.json(
        { error: "√âchec mise √† jour Clerk." },
        { status: 500 }
      );
    }

    // 3. Mise √† jour du r√¥le dans Supabase (profil)
    const { error: profileUpdateError } = await supabase
      .from("profiles")
      .update({
        role,
        updated_at: new Date().toISOString(),
      })
      .eq("user_id", userId);

    if (profileUpdateError) {
      console.error("[VALIDATE] ‚ùå Erreur update profil:", profileUpdateError);
      return NextResponse.json(
        { error: "√âchec de mise √† jour du profil." },
        { status: 500 }
      );
    }

    // 4. Mise √† jour de la demande (statut + timestamp)
    const { error: requestUpdateError } = await supabase
      .from("farmer_requests")
      .update({
        status,
        updated_at: new Date().toISOString(),
        approved_by_admin_at:
          status === "approved" ? new Date().toISOString() : null,
      })
      .eq("id", numericRequestId);

    if (requestUpdateError) {
      console.error("[VALIDATE] ‚ùå Erreur update demande:", requestUpdateError);
      return NextResponse.json(
        { error: "√âchec de la mise √† jour de la demande." },
        { status: 500 }
      );
    }

    // 5. Cr√©ation automatique du listing si approuv√©
    if (status === "approved") {
      const {
        farm_name,
        location,
        description,
        phone,
        website,
        email,
        products,
      } = requestData;

      const { data: listingData, error: insertListingError } = await supabase
        .from("listing")
        .insert([
          {
            createdBy: userId,
            name: farm_name,
            description,
            phoneNumber: phone,
            email,
            website,
            address: location,
            product_type: products ?? null,
            status: "draft", // ou "incomplete" si tu veux une √©tape suppl√©mentaire
          },
        ])
        .select("id")
        .single();

      if (insertListingError) {
        console.error(
          "[VALIDATE] ‚ùå Erreur cr√©ation fiche producteur:",
          insertListingError
        );
        return NextResponse.json(
          { error: "Fiche producteur non cr√©√©e." },
          { status: 500 }
        );
      }

      console.log("‚úÖ [VALIDATE] Listing cr√©√© avec ID :", listingData.id);

      // 6. Mise √† jour du profil avec farm_id
      const { error: profileLinkError } = await supabase
        .from("profiles")
        .update({ farm_id: listingData.id })
        .eq("user_id", userId);

      if (profileLinkError) {
        console.error(
          "[VALIDATE] ‚ùå Erreur update farm_id dans profil :",
          profileLinkError
        );
        // ‚ö†Ô∏è pas bloquant pour l'instant
      }
    }

    // 7. Envoi de l‚Äôemail de statut au producteur
    try {
      await sendFarmerRequestStatusEmail(requestData, status);
      console.log("üìß [VALIDATE] Email de statut envoy√© avec succ√®s");
    } catch (err) {
      console.warn("[VALIDATE] ‚ö†Ô∏è Email non envoy√© :", err);
      // Non bloquant
    }

    return NextResponse.json({
      success: true,
      message:
        status === "approved"
          ? "Demande approuv√©e avec succ√®s."
          : "Demande rejet√©e avec succ√®s.",
    });
  } catch (err) {
    console.error("[VALIDATE] ‚ùå Erreur serveur inconnue :", err);
    return NextResponse.json(
      { error: "Erreur interne lors de la validation." },
      { status: 500 }
    );
  }
}
